{"version":3,"sources":["constants.ts","pages/MintPage/styles.tsx","pages/MintPage/index.tsx","hooks/useCandyMachine.ts","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_CONFIG","CANDY_MACHINE_UUID","slice","START_DATE","RPC_MAINNET_URL","RPC_DEVNET_URL","NETWORK","WalletAdapterNetwork","Mainnet","WALLETS","getPhantomWallet","getSolflareWallet","getSolletWallet","network","CANDY_MACHINE","PROGRAM_ID","web3","PublicKey","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_PROGRAM_ID","INVADERS_STORAGE_MINT_KEY","StyledWalletMultiButton","styled","WalletMultiButton","StyledButton","Button","StyledInput","Input","MaxButton","FlipClockNumber","n","barColor","display","bgGradient","borderRadius","position","w","justifyContent","alignItems","shadow","color","m","overflow","border","borderColor","left","right","height","background","h","bg","fontSize","mt","pl","MintPage","wallet","useWallet","connection","useConnection","useState","isMinting","setIsMinting","candyMachineState","setCandyMachineState","isPolling","setIsPolling","fetchData","a","fetchCandyMachineState","state","candy","useInterval","startDate","Date","Number","undefined","useEffect","useCandyMachine","quantity","setQuantity","handleClick","i","numMinted","localStorage","getItem","e","toast","error","mint","tx","success","href","getTransactionLink","isExternal","ExternalLink","setItem","String","parseMintError","maxW","p","theme","textAlign","pb","pt","as","base","md","lg","fontWeight","backgroundImage","objectFit","backgroundSize","backgroundPosition","py","lineHeight","mb","date","renderer","days","hours","minutes","seconds","totalHours","paddedHours","paddedMinutes","paddedSeconds","whiteSpace","transform","mr","split","map","flexDir","Math","max","itemsRedeemed","toNumber","size","className","connected","mx","top","variant","colorScheme","onClick","_focus","outline","style","onChange","handleQuantityChange","target","value","min","type","placeholder","css","pointerEvents","disabled","extendTheme","fonts","heading","body","Fonts","styles","App","endpoint","getRpcUrl","wallets","autoConnect","featuredWallets","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","getTokenWallet","findProgramAddress","toBuffer","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachine","config","uuid","getMasterEdition","provider","Provider","signAllTransactions","signTransaction","publicKey","preflightCommitment","Program","fetchIdl","idl","anchorProgram","candyMachine","account","fetch","getMetadata","Keypair","generate","token","metadata","masterEdition","rpc","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","accounts","signers","instructions","mintNft","message","msg","startsWith","code","Devnet"],"mappings":"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","file":"static/js/main.ac1cbc00.chunk.js","sourcesContent":["import { web3 } from \"@project-serum/anchor\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolletWallet,\n  getSolflareWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\n// Project Specific Config\nexport const CANDY_MACHINE_CONFIG =\n  \"7Mg1MVpW2n9YR5whXBNUdCUGph3asCJHH7JXMFvnsvKk\";\nexport const CANDY_MACHINE_UUID = CANDY_MACHINE_CONFIG.slice(0, 6);\nexport const START_DATE = 0;\nexport const RPC_MAINNET_URL = \"https://api.mainnet-beta.solana.com\";\nexport const RPC_DEVNET_URL = \"https://api.devnet.solana.com\";\nexport const NETWORK = WalletAdapterNetwork.Mainnet;\nexport const WALLETS = [\n  getPhantomWallet(),\n  getSolflareWallet(),\n  getSolletWallet({ network: NETWORK }),\n];\n\n// Candy Machine Specific Config\nexport const CANDY_MACHINE = \"candy_machine\";\nexport const PROGRAM_ID = new web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\nexport const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\nexport const TOKEN_PROGRAM_ID = new web3.PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const INVADERS_STORAGE_MINT_KEY = \"1635867668\";\nexport const WHITELIST = [\n  \"E4S1hs5dwpiUdV3soSDJ5zsdTuCvcdmAuisYUXmmiC1Z\",\n  \"5BZqMHvzvyCZebrQMbFkAQ4nkECjP85iFJqCKMSinBEH\",\n  \"3p6bJymzw93Sta8LJe5BKgmuojRRF9DrqT8gV1yxVn1T\",\n  \"9UVxgNFsYYmCusd1r1G42DDCw5rrwzJYPXSp3xDwhTfu\",\n  \"7YYHQGyQmFd3UkVX64VkhKspFhSdQm18QAQfgEM4CDmj\",\n  \"7LBFC3uTKfcwhAnjTRwfdqZQ4vjeZD8oqKYM8PBHj8wp\",\n  \"Hw82wwwsJqqPUEsFwbCigQmRFAMgSWCKBqD3JRhLWRcR\",\n  \"8sBNLX9UkbzWVSvb1wQj6bbvLE5zP53YT7s4DJ1vZh8f\",\n  \"Gwki2LgAbMXEkgAi4unXrktb5rY9fzQG9Eq2kmH5ooqt\",\n  \"F4C4owGM6TL2AQRDeHcMJAKdRrf48mLtTPRZkyLgHvFK\",\n  \"GBrAisibPD4RJB4YbBsAcAEcYMfEtkWuCTm8HkGzwt7v\",\n  \"CBBUmFb3UkRnZsb93q19vThDHCHuunswPB6TBtfMgMQh\",\n  \"8tfjshqgEBFGRuaQQA5BHvCVnmCbr2K5g5uxCYb1LAFi\",\n  \"5R2MmhLQ6Bo7H2iMKts6Mh41U2yVopTLVzm92Hc8iDHf\",\n  \"3LyLwAbBC28cUTU5cNRdJ25XE47Hxrw5fjjbJ71NwMPh\",\n  \"5AVQVtJHps1GVbMxKpBN5DTWHr9KgLcys4eVzWv5kwN2\",\n  \"3UFZuK6VWRUv9Eijm8Wwnuvaq23H6kZ3MC6BjWFCa5nC\",\n  \"HtL2eUFAGXRqYzvfLDY88CBZ8uFiVZ2LDYs9XmRCJjE5\",\n  \"AiLxn9i5R1HJfyrWnopnyYqJu8AgNYn5WLJE7xT3i8FY\",\n  \"GmoFjjEqykpep2RNSZ4jRLpYJX2mcSy626UTTfSqyhXi\",\n  \"6QD4zkbNYBYk5uzHgnZiVNwTvXW9AwVLXmJW72xwumGH\",\n  \"74dzMkFpMHMSnAW5Gmo2JTh6EGPPUowtoYFo9GAkZcyo\",\n  \"8ozhkmJFQgcSw7V7hGBVqq2ZAhA6mQCtfvrGZZWWGg6N\",\n  \"B9ZcvV4aBDBXxbvEf27zFWNu8KENxZhA3ZYQNFUrhZeT\",\n  \"DrhoY5TJ3E94LA9312jLT5P7Kkrvbw9XByoudminjpaQ\",\n  \"212v2Lm6THxr3kNXX5xxaUV4qSTejfvxCor9eKfehDN2\",\n  \"7S2sWoj3zAuM6HpQnnnEc3K6eXaUFgkHqaHEQD84aeeZ\",\n  \"FWHSgmqh7CLmFmi5tZ1rvdWdETNcLWtmNh7dSy8ntXE5\",\n  \"J7uvC4TwVMPrJJNJZoMkLa5uJGaPGfPqnu9nNEDrquyo\",\n  \"BxDHDxRDDCA4TbEL7Lc98XDNoAwnNPSnpVkqc5o6fbUM\",\n  \"HUeCs4p8uxqNT1VS8VKxhbHNurzpE6MzDPYNZPm4UZuL\",\n  \"8yRdMNXTCqinwyVrJsYEvQHqS4HkiNAaTRkpZ1uYKPFo\",\n  \"6SLj56zt8ue6ZSHkwEvzXaGbcSYJTiX43PBme3SdnZPQ\",\n  \"FzGabxSmtgm7H4KE3JTMjU3mvMztDWsuq5HRaJZsYK5h\",\n  \"Ez1BvVe7LMavfKeTLYq2EQc6nk9gMtbuxhJeiGxNSDGa\",\n  \"ciuMvrXyGorGMaBxHKnrwMERxkVxhaTL1Jp4iJaGHVc\",\n  \"5acqdDoRbhCahs6akguPxtgvR7gLfn2tjf1MYzJm4tfz\",\n  \"2wCDF4HXUuj3k8VPKVKZuWqUd8tisppBiLMi2ZdYQyFx\",\n  \"3x5SP5rjLSdJCnbxWeH8o4zkmkZx4hcvLHLJk1MqchS4\",\n  \"Eq2Ahd31ozdfPwZRcmTY6XL3WsSBfPM5sCEKq5RL7auU\",\n  \"B4FUNbx6svBcCqGaR8pJWPVMinbgVTNPa1yzuXpsHck7\",\n  \"Hhkc8pvvLa3FEztY1m1P8FGWBEhQqG3L5PzmVrh97ic\",\n  \"FKpJveAko7qzGwu6ztGgaY1chrBc4L2mDaaLP5MXQu54\",\n  \"9BTmZTWGmEkR1jDYko5jbHDx8Z6Gi1mfWAh6U8FicaVQ\",\n  \"A1ghe3LEm9GRkSScyFsxQE6c8nMCYouXK1TPEmfLTWmx\",\n  \"7GRo6DkKw1AQf7hjJEbMD52TBNdQWjaDqLFbRTCjcre\",\n  \"47fBCCN89D3xbeLCYfHPiENXreXoovcgEodsyb3hB2eR\",\n  \"BrKCG3B6ThArNtkuoFPiUCFAGLbMN4kSxGgz4W6RBht6\",\n  \"3rRerMoG8UBRW8DwLZ21X1kcPoreBHDAbPyFfKgsyqmZ\",\n  \"ButChvXZkbZShzmJJw8gTiiuHrSwvMv1pMWENjS14DaZ\",\n  \"Bii8RTuuHoqiPU3982iF5K3ELxHR5VsNXHSJAwa6jtpz\",\n  \"2gGgxpzwytKfRFvWgdARQ5Un1dGjsduhF4HFpWBJrHvG\",\n  \"HkRKW9YkDMpCRS4Ud2CnCgGdcTet5sDCudicJfbz3JKv\",\n  \"CSDBEnSPQwciXLNmkyzMT8aBaKa6owBH1ZfZm1zLGzSw\",\n  \"6f45VtmA1hXy54faSvLRC1kRA8aHP6hLwe9LpEJGDPZn\",\n  // \"CsnTDtRNMqVahGLvZAEuoVWME1zdWJaWXkyHjkG7qnUr\",\n];\n","import { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport styled from \"@emotion/styled\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/react\";\n\nexport const StyledWalletMultiButton = styled(WalletMultiButton)``;\n\nexport const StyledButton = styled(Button)``;\n\nexport const StyledInput = styled(Input)``;\n\nexport const MaxButton = styled(Button)``;\n","import {\n  Box,\n  Heading,\n  Link,\n  Text,\n  Container,\n  FormLabel,\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useCandyMachine } from \"../../hooks/useCandyMachine\";\nimport { MintError } from \"../../types\";\nimport { getTransactionLink, mint, parseMintError } from \"../../utils\";\nimport {\n  MaxButton,\n  StyledButton,\n  StyledInput,\n  StyledWalletMultiButton,\n} from \"./styles\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { INVADERS_STORAGE_MINT_KEY } from \"../../constants\";\nimport { useState } from \"react\";\nimport Countdown from \"react-countdown\";\n\nconst FlipClockNumber = ({ n }: { n: string }) => {\n  const barColor = \"black\";\n  return (\n    <Box display=\"inline-block\">\n      <Box\n        bgGradient=\"linear(to-b, #3f3316, #3f3316ad)\"\n        borderRadius={6}\n        position=\"relative\"\n        w={100}\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        shadow=\"xl\"\n        color=\"#e7b569\"\n        m={1}\n        overflow=\"hidden\"\n        border=\"4px solid\"\n        borderColor=\"black\"\n      >\n        <Box\n          position=\"absolute\"\n          left={0}\n          right={0}\n          height=\"5px\"\n          background={barColor}\n        />\n        <Box\n          position=\"absolute\"\n          w=\"4px\"\n          h=\"20px\"\n          bg={barColor}\n          bgGradient=\"linear(to-b, black, white)\"\n          left={1}\n          shadow=\"sm\"\n          borderRadius={2}\n        ></Box>\n        <Box\n          position=\"absolute\"\n          w=\"4px\"\n          h=\"20px\"\n          bg={barColor}\n          bgGradient=\"linear(to-b, black, white)\"\n          right={1}\n          shadow=\"sm\"\n          borderRadius={2}\n        ></Box>\n        <Text fontSize={100} mt={-4} pl={2}>\n          {n}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default function MintPage() {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n  const { candyMachineState, setIsMinting, isMinting } = useCandyMachine();\n  const [quantity, setQuantity] = useState(0);\n\n  const handleClick = async () => {\n    setIsMinting(true);\n\n    for (var i = 0; i < quantity; i++) {\n      let numMinted = 0;\n\n      try {\n        numMinted = Number(\n          localStorage.getItem(INVADERS_STORAGE_MINT_KEY) || \"0\"\n        );\n      } catch (e) {}\n\n      if (numMinted >= 10) {\n        toast.error(\"Sorry! You have already minted the max of 10.\");\n        setIsMinting(false);\n        break;\n      }\n\n      try {\n        const tx = await mint({ wallet, connection });\n        toast.success(\n          <>\n            Success!{\" \"}\n            <Link href={getTransactionLink(tx as string)} isExternal>\n              View transaction <ExternalLinkIcon />\n            </Link>\n          </>\n        );\n        localStorage.setItem(INVADERS_STORAGE_MINT_KEY, String(numMinted + 1));\n      } catch (e) {\n        const error = parseMintError(e as MintError);\n        toast.error(error);\n      }\n    }\n\n    setIsMinting(false);\n  };\n\n  const handleQuantityChange = (quantity: number) => {\n    setQuantity(quantity);\n  };\n\n  return (\n    <Container maxW=\"full\" p={0}>\n      <ToastContainer theme=\"dark\" />\n      <Box textAlign=\"center\" bg=\"#3f3316\" color=\"#e7b569\" pb={3} pt={9}>\n        <Heading\n          as=\"h1\"\n          fontSize={{ base: 30, md: 40, lg: 48 }}\n          fontWeight={400}\n        >\n          GARDENTHEO LUNANESSA\n        </Heading>\n      </Box>\n      <Box\n        backgroundImage=\"/images/BG.png\"\n        objectFit=\"cover\"\n        backgroundSize=\"cover\"\n        backgroundPosition=\"50% 50%\"\n        py=\"60px\"\n      >\n        <Container fontSize={40} color=\"white\" textAlign=\"center\" maxW=\"3xl\">\n          <Heading\n            as=\"h2\"\n            fontWeight={800}\n            fontSize=\"50px\"\n            lineHeight=\"55px\"\n            mb={30}\n          >\n            WELCOME TO THE LANDS OF GARDENTHEO LUNANESSA\n          </Heading>\n          <Text fontWeight={100} fontSize=\"40px\" lineHeight=\"44px\" mb={30}>\n            A HYBRID WORLD OF BIOLOGY, TECHNOLOGY, FANTASY AND PURE WILDERNESS\n          </Text>\n          <Text fontWeight={100} fontSize=\"40px\" lineHeight=\"44px\">\n            ONE INDEPENDENT ARTIST'S SERIES OF CREATIONS\n          </Text>\n        </Container>\n      </Box>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        bg=\"#fff8ed\"\n        py={{ base: 5, md: 20 }}\n      >\n        <Countdown\n          date={\n            new Date(\n              \"Fri Nov 11 2021 17:00:00 GMT-0400 (Eastern Daylight Time)\"\n            )\n          }\n          renderer={({ days, hours, minutes, seconds }) => {\n            const totalHours = days * 24 + hours;\n            const paddedHours: string =\n              totalHours < 10 ? \"0\" + totalHours : \"\" + totalHours;\n            const paddedMinutes: string =\n              minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n            const paddedSeconds: string =\n              seconds < 10 ? \"0\" + seconds : \"\" + seconds;\n            return (\n              <Box\n                color=\"#111111\"\n                whiteSpace=\"nowrap\"\n                transform={[\n                  \"scale(0.4)\",\n                  \"scale(0.55)\",\n                  \"scale(0.8)\",\n                  \"scale(1.0)\",\n                ]}\n              >\n                <Box display=\"inline-block\" mr={10}>\n                  <Box textAlign=\"center\">Hours</Box>\n                  {paddedHours.split(\"\").map((n, i) => (\n                    <FlipClockNumber n={n} key={i} />\n                  ))}\n                </Box>\n                <Box display=\"inline-block\" mr={10}>\n                  <Box textAlign=\"center\">Minutes</Box>\n                  {paddedMinutes.split(\"\").map((n, i) => (\n                    <FlipClockNumber n={n} key={i} />\n                  ))}\n                </Box>\n                <Box display=\"inline-block\">\n                  <Box textAlign=\"center\">Seconds</Box>\n                  {paddedSeconds.split(\"\").map((n, i) => (\n                    <FlipClockNumber n={n} key={i} />\n                  ))}\n                </Box>\n              </Box>\n            );\n          }}\n        />\n      </Box>\n      <Container w={[\"md\", \"md\", \"xl\"]} mb={12} display=\"none\" flexDir=\"column\">\n        {candyMachineState ? (\n          <Text color=\"#79FE0C\">\n            {Math.max(candyMachineState?.itemsRedeemed.toNumber() - 1367, 0)}\n            /3333\n          </Text>\n        ) : (\n          <Spinner size=\"lg\" color=\"#79FE0C\" />\n        )}\n        <Box mt={4}>\n          <StyledWalletMultiButton className=\"nes-btn\" />\n        </Box>\n        {wallet?.connected && (\n          <Box mt={4}>\n            <Box className=\"nes-field\" position=\"relative\" mb={4} mx={8}>\n              <MaxButton\n                size=\"xs\"\n                top={4}\n                variant=\"solid\"\n                colorScheme=\"purple\"\n                right={4}\n                onClick={() => setQuantity(10)}\n              >\n                Max\n              </MaxButton>\n              <FormLabel>Quantity</FormLabel>\n              <StyledInput\n                _focus={{ outline: \"none\" }}\n                className=\"nes-input\"\n                style={{ background: \"transparent\" }}\n                onChange={(e) => handleQuantityChange(Number(e.target.value))}\n                min={1}\n                max={10}\n                type=\"number\"\n                placeholder=\"Enter Quantity\"\n                value={quantity > 0 ? String(quantity) : \"\"}\n              />\n            </Box>\n            <StyledButton\n              onClick={() => handleClick()}\n              css={{ pointerEvents: isMinting ? \"none\" : \"auto\" }}\n              disabled={isMinting || quantity < 1 || quantity > 10}\n            >\n              {isMinting && <Spinner mr={2} size=\"sm\" />}\n              Mint\n            </StyledButton>\n            <Text color=\"white\" fontSize={12} pt={2}>\n              Minting costs 0.25 SOL\n            </Text>\n          </Box>\n        )}\n      </Container>\n    </Container>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\nimport { fetchCandyMachineState } from \"../utils\";\nimport { START_DATE } from \"../constants\";\nimport { CandyMachineState } from \"../types\";\nimport { useInterval } from \"react-use\";\n\nexport const useCandyMachine = () => {\n  const [isMinting, setIsMinting] = useState(false);\n  const [candyMachineState, setCandyMachineState] =\n    useState<CandyMachineState>();\n  const { connection } = useConnection();\n  const [isPolling, setIsPolling] = useState(false);\n\n  const fetchData = async () => {\n    setIsPolling(true);\n    try {\n      const state = await fetchCandyMachineState({ connection });\n      setCandyMachineState(state.candy as CandyMachineState);\n    } catch (e) {}\n  };\n\n  useInterval(fetchData, isPolling ? 10e3 : null);\n\n  const startDate = START_DATE\n    ? new Date(Number(START_DATE) * 1000)\n    : undefined;\n\n  useEffect(() => {\n    if (!candyMachineState) fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [candyMachineState, connection]);\n\n  return {\n    candyMachineState,\n    isMinting,\n    setIsMinting,\n    startDate,\n  };\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { NETWORK, WALLETS } from \"./constants\";\nimport { getRpcUrl } from \"./utils\";\n\nimport { extendTheme } from \"@chakra-ui/react\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport MintPage from \"./pages/MintPage\";\nimport { Global } from \"@emotion/react\";\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"PixelTandysoft\",\n    body: \"PixelTandysoft\",\n  },\n});\n\nconst Fonts = () => (\n  <Global\n    styles={`\n        @font-face {\n          font-family: \"PixelTandysoft\";\n          font-style: normal;\n          font-weight: 400;\n          src: url(/fonts/PixelTandysoft.woff);\n        }\n    `}\n  ></Global>\n);\n\nfunction App() {\n  return (\n    <ConnectionProvider endpoint={getRpcUrl(NETWORK)}>\n      <WalletProvider wallets={WALLETS} autoConnect={false}>\n        <WalletModalProvider featuredWallets={3}>\n          <ChakraProvider theme={theme}>\n            <Fonts />\n            <Router>\n              <Switch>\n                <Route path=\"/\">\n                  <MintPage />\n                </Route>\n              </Switch>\n            </Router>\n          </ChakraProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CSSReset from \"@chakra-ui/css-reset\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CSSReset />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Provider, Program, web3 } from \"@project-serum/anchor\";\nimport { MintLayout, Token } from \"@solana/spl-token\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {\n  SystemProgram,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  Connection,\n} from \"@solana/web3.js\";\n\nimport {\n  CANDY_MACHINE_CONFIG,\n  CANDY_MACHINE_UUID,\n  CANDY_MACHINE,\n  PROGRAM_ID,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  RPC_MAINNET_URL,\n  RPC_DEVNET_URL,\n} from \"./constants\";\nimport { MintError } from \"./types\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\n\nconst getTokenWallet = async function (wallet: PublicKey, mint: PublicKey) {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey\n) => {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nconst getCandyMachine = async (config: anchor.web3.PublicKey, uuid: string) => {\n  return (\n    await PublicKey.findProgramAddress(\n      [Buffer.from(CANDY_MACHINE), config.toBuffer(), Buffer.from(uuid)],\n      PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMasterEdition = async (mint: PublicKey) => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const fetchCandyMachineState = async ({\n  wallet,\n  connection,\n}: {\n  wallet?: WalletContextState;\n  connection: Connection;\n}) => {\n  const provider = new Provider(\n    connection,\n    wallet\n      ? ({\n          ...wallet.wallet,\n          signAllTransactions: wallet.signAllTransactions,\n          signTransaction: wallet.signTransaction,\n          publicKey: wallet.publicKey,\n        } as anchor.Wallet)\n      : ({} as anchor.Wallet),\n    {\n      preflightCommitment: \"recent\",\n    }\n  );\n\n  const idl = await Program.fetchIdl(PROGRAM_ID, provider);\n  const anchorProgram = new Program(idl, PROGRAM_ID, provider);\n  const config = new web3.PublicKey(CANDY_MACHINE_CONFIG);\n  const candyMachine = await getCandyMachine(config, CANDY_MACHINE_UUID);\n  const candy = await anchorProgram.account.candyMachine.fetch(candyMachine);\n\n  return {\n    provider,\n    idl,\n    anchorProgram,\n    config,\n    candyMachine,\n    candy,\n  };\n};\n\nconst getMetadata = async (mint: PublicKey) => {\n  return (\n    await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mint = async ({\n  wallet,\n  connection,\n}: {\n  wallet: WalletContextState;\n  connection: Connection;\n}): Promise<string | undefined> => {\n  const mint = web3.Keypair.generate();\n\n  if (wallet && wallet.wallet && wallet.publicKey) {\n    const token = await getTokenWallet(wallet.publicKey, mint.publicKey);\n    const { provider, anchorProgram, config, candyMachine, candy } =\n      await fetchCandyMachineState({ wallet, connection });\n    const metadata = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    return anchorProgram.rpc.mintNft({\n      accounts: {\n        config: config,\n        candyMachine: candyMachine,\n        payer: wallet.publicKey,\n        // @ts-ignore\n        wallet: candy.wallet,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: wallet.publicKey,\n        updateAuthority: wallet.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n      signers: [mint],\n      instructions: [\n        web3.SystemProgram.createAccount({\n          fromPubkey: wallet.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: await provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span\n          ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          wallet.publicKey,\n          wallet.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          wallet.publicKey,\n          wallet.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          wallet.publicKey,\n          [],\n          1\n        ),\n      ],\n    });\n  }\n};\n\nexport const getPublicKeyDisplay = (publicKey: PublicKey) => {\n  const base58 = publicKey.toBase58();\n  return base58.substr(0, 5) + \"...\" + base58.substr(base58.length - 5);\n};\n\nexport const parseMintError = (error: MintError): string => {\n  let message =\n    error.message || error.msg || \"Minting failed! Please try again!\";\n\n  if (message.startsWith(\"Signature request denied\")) {\n    message = \"Signature request denied! \";\n  } else if (\n    message.startsWith(\n      \"failed to send transaction: Transaction simulation failed: \"\n    )\n  ) {\n    message = message.split(\"failed: \")?.[1];\n  } else if (message.startsWith(\"unknown signer:\")) {\n    message = \"Please make sure to sign with the connected address.\";\n  } else if (error.code === 311) {\n    message = \"Sorry we've sold out!\";\n  } else if (error.code === 312) {\n    message = \"Minting period hasn't started yet.\";\n  } else if (error.code === 309) {\n    message = \"Insufficient funds to mint. Please fund your wallet.\";\n  }\n\n  return message;\n};\n\nexport const getTransactionLink = (tx: string) => `https://solscan.io/tx/${tx}`;\n\nexport const getRpcUrl = (network: WalletAdapterNetwork) => {\n  switch (network) {\n    case WalletAdapterNetwork.Mainnet:\n      return RPC_MAINNET_URL;\n    case WalletAdapterNetwork.Devnet:\n    default:\n      return RPC_DEVNET_URL;\n  }\n};\n"],"sourceRoot":""}